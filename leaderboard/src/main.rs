use anyhow::Result;

use leaderboard::contracts::active_contract::ActiveContractBuilder;
use leaderboard::contracts::coop::Coop;
use leaderboard::formatter::discord_table::{DiscordTable, DiscordTableColumn};
use leaderboard::formatter::discord_timestamp::{DiscordTimestamp, DiscordTimestampDisplay};
use leaderboard::formatter::string_formatter::StringAlignment;

#[tokio::main]
async fn main() -> Result<()> {
    let contract_id = "st-patty-2019";
    let coop_ids = vec![
        "accent470",
        "quartz938",
        "stress420",
        "relate379",
        "oyster582",
        "soccer772",
        "switch958",
        "priest958",
        "willie631",
        "holyshit",
    ];

    let mut contr = ActiveContractBuilder::new()
        .contract_id(contract_id)
        .build()
        .await?;

    for id in coop_ids {
        if let Err(e) = contr.add_coop(id).await {
            println!("WARN: {}, continuing...", e)
        }
    }

    let mut table = DiscordTable::new();
    let name_col = DiscordTableColumn::new(
        "Coop",
        |c: Coop| {
            format!(
                "[\u{29c9}](<https://eicoop-carpet.netlify.app/{}/{}>) `{}",
                c.contract_id(),
                c.coop_id(),
                c.stripped_coop_id()
            )
        },
        8,
        StringAlignment::Centered,
    );
    let boosted_col = DiscordTableColumn::new(
        "Boosted",
        |c: Coop| c.boosted_count().to_string(),
        9,
        StringAlignment::Centered,
    );
    let token_col = DiscordTableColumn::new(
        "Tokens",
        |c: Coop| c.total_tokens().to_string(),
        8,
        StringAlignment::Centered,
    );
    let dur_col = DiscordTableColumn::new(
        "Duration",
        |c: Coop| c.total_predicted_duration().format_too_long(),
        10,
        StringAlignment::Centered,
    );
    let finish_col = DiscordTableColumn::new(
        "Finish",
        |c: Coop| {
            format!(
                "`{}",
                c.finishing_time()
                    .display(DiscordTimestampDisplay::FullDateTime)
            )
        },
        20,
        StringAlignment::Centered,
    );

    table.add_column(name_col);
    table.add_column(boosted_col);
    table.add_column(token_col);
    table.add_column(dur_col);
    table.add_column(finish_col);

    for coop in contr.coops() {
        table.add_data_row(coop.clone());
    }

    println!(
        "Last updated: {}\n",
        DiscordTimestamp::new_from_now().display(DiscordTimestampDisplay::Relative)
    );
    println!("{}", table.get_table_header());
    println!("{}", table.get_table_body());
    println!(
        "`Primary order based off of duration`\
    \
    *`!!sruc` to summon an update!*\
    *Note that this is NOT a Wonky command, and is still generated by WHAL-Int-rs*"
    );

    Ok(())
}
